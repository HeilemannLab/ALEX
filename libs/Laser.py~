'''######################################################################
# File Name: Laser.py
# Project: ALEX
# Version:
# Creation Date: 2017/07/21
# Created By: Karoline
# Company: Goethe University of Frankfurt
# Institute: Institute of Physical and Theoretical Chemistry
# Department: Single Molecule Biophysics
# License: GPL3
#####################################################################'''
import libs.DigitalSignal
import libs.Timing
import libs.AnalogSignal
from multiprocessing import Process


class Laser(Process):
    """
    The laser class is a subclass of multiprocessing.Process.
    It serves to run the illumination class as long as the
    measurements takes place. It also starts and stops the
    timing task, which provides sampling and especially the
    trigger edge.
    """
    def __init__(self, running, dictionary, semaphore):
        """
        @param running: multiprocessing event
        @param dictionary: dictionary class instance
        @param semaphore: multiprocessing Semaphore
        """
        super(Laser, self).__init__()
        self.daemon = True
        self._sem = semaphore
        self._digital = libs.DigitalSignal.DigitalSignal(semaphore)
        self._analog = libs.AnalogSignal.AnalogSignal()
        self._timing = libs.Timing.Timing()
        self._running = running
        self._dict = dictionary

        self._digital.refreshSettings(self._dict)
        self._timing.refreshSettings(self._dict)
        self._analog.refreshSettings(self._dict)

    def run(self):
        """
        The timing task starts after the illumination task because
        of the ArmStartTrigger, which synchronizes the tasks. So
        starting timing task before could end in unsynchronized tasks.
        The while loop is rather a dummy thing, since it only passes
        by time until measurement is indicated as done by self._running.
        """
        self._timing.InitClock()
        self._analog.InitAnalog()

        self._digital.startIllumination()
        self._timing.startClock()
        self._analog.startAnalog()

        while self._running.is_set():
            pass
        self._analog.stopAnalog()
        self._digital.stopIllumination()
        self._timing.stopClock()
        self._sem.release()
        print("Laser stopped and exits.")

    def __del__(self):
        print("Laser class instance has been removed.")

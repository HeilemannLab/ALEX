<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=14
fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>20</y>
      <w>210</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>main
--
- app: QApplication
- mainWindow: mainwindow.MainWindow
--
- main()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>20</y>
      <w>210</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>GenerateSignal
AnalogOutput.py
--
- _sampFreq: int
- _dict: class
- _freq: float
- _red: ndarray
- _green: ndarray
- read: int32
- redAmp: float
- greenAmp: float
- _data: ndarray
- analogOutput: daqmx.task
--
- __init__()
- refreshSettings(dict dict)
- Intensities()
- AnalogChannels()
- startAnalog()
- stopAnalog()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>920</x>
      <y>20</y>
      <w>420</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Animation
Animation.py
--
- _animDataQ1: multiprocessing.Queue
- _animDataQ2: multiprocessing.Queue
- _signal: pyqtSignal
- _dt: float
- _tdata: list
- _greenData: list
- _redData: list
- _greenLine: pyplot.Line2D
- _redLine: pyplot.lines.Line2D
- _figure: pyplot.figure
- ax: Axes?
- anim: pyplot.animation
--
- __init__(queue AnimData1, queue AnimData2, pyqtSignal signal)
- run()
- plot()
- initAnimation()
- updateAnimation(iterable i)
- animate()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>510</y>
      <w>210</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>TimestampingCounters
APD.py
--
- _sampNumber: int
- _N: int
- _buffer: int
- _value1: ndarray
- _value2: ndarray
- _roll1: ndarray
- _roll2: ndarray
- _data: ndarray
- _read: int32
- _counetr1: daqmx.task
- _counter2: daqmx.task
- _rollover1: daqmx.task
- _rollover2: daqmx.task
--
- __init__(int readArraySize, int N)
- startCounting()
- InitializeCounter1
- IntializeCounter2
- SamplingCounter1()
- SamplingCounter2()
- ArmStartCounter1()
- ArmStartCounter2()
- readAPD()
- actualCounting()
- stopCounting()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>370</y>
      <w>500</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Counter
multiprocessing.Process
Counter.py
--
- daemon: bool
- _sets: dict
- _readArraySize: int
- _N: int
- _apd: libs.APD.TimestampingCounter
- _running: multiprocessing.Event
- _data: ndarray
- _dataQ: multiprocessing.Queue
--
- __init__(event running, dict dictionary, queue dataQ, int readArraySize, int N)
- run()
- Measurement()
- __del__()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>640</y>
      <w>530</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>DataProcesser
multiprocessing.Process
dataProcesser.py
--
- daemon: bool
- _dataQ: multiprocessing.Queue
- _animDataQ: multiprocessing.Queue
- _resultQ: multiprocessing.Queue
- _readArraySize: int
- _N: int
- _timestamps: ndarray
- array: object
- n1: float
- n2: float
- n3: float
--
- __init__(queue dataQ, queue animDataQ, queue resultQ, int readArraySize, int N)
- run()
- dataProcessing()
- __del__()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>340</y>
      <w>210</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>UIsettings
dictionary.py
--
- a: dict
- self._a: dict
--
- __init__()
- getitem(string item)
- setitem(string item, float var)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>340</y>
      <w>210</w>
      <h>410</h>
    </coordinates>
    <panel_attributes>Illumination
Illumination.py
--
- _dict: libs.dictionary.UIsettings
- _analog.AnalogOutput.GenerateSignal
- _percentHighGreen: float
- _percentHighRed: float
- _frequency: float
- _highTime: float
- _lowTime: float
- _initialdelayRed: float
- _highSil: float
- _lowSil: float
- _initialDelay_sil1: float
- _initialDelay_sil2: float
- _green: daqmx.task
- _red: daqmx.task
- _sil1: daqmx.task
- _sil2: daqmx.task
--
- __init__()
- refreshSettings(dict dictionary)
- calcSignal()
- startIllumination()
- triggerIllumination()
- stopIllumination()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>130</y>
      <w>210</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>LaserControl
multiprocessing.Process
Laser.py
--
- demon: bool
- _laser: libs.Illumination.Illumination
- _timing: libs.Timing.SampleClock
- _running: multiprocessing.Event
- _dict: dict
--
- __init__(event running, dict dictionary)
- run()
- __del__()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>270</y>
      <w>210</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>plotIllumination
plotIllumination.py
--
- _dict: libs.dictionary.UIsettings
- _t: ndarray
- _green: ndarray
- _red: ndarray
- _greenPercent: float
- _greenAmp: float
- _redAmp: float
--
- __init__()
- refreshSettings(dict dictionary)
- plot(string fname)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>0</y>
      <w>340</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Refresh
Refresher.py
--
- _sets: dict
--
- __init__()
- refreshUI()
- changeRadioButton(pyqt.QRadioButton b)
- refreshSliderSettings(string changeKey, float value)
- refreshBoxSettings(string changeKey, float value)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>510</y>
      <w>210</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>SampleClock
Timing.py
--
- _dict: libs.dictionary.UIsettings
- _timingPulse: daqmx.task
- _freq: float
--
- __init__()
- refreshSettings(dict dictionary)
- Pulse()
- startClock()
- stopClock()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>760</y>
      <w>400</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>FileDialogue
saveFiles.py
--
- _dict: libs.dictionary.UIsettings
- _plot: libs.plotIllumination.plotIllumination
--
- __init__()
- refreshSettings(dict dictionary)
- SortTasks(string keyword, filehandler filename, ndarray data)
- saveDataToTxt(filehandler filename, ndarray data)
- saveDataToHDF5()
- saveDict(filehandler filename)
- loadDict(filehandler filename)
- createFolder(filehandler filename)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>270</y>
      <w>210</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>Communicate
PyQt5.QtCore.QObject
mainwindow.py
--
- measurementProgress: pyqtSignal
- startMeasurement: pyqtSignal
- stopMeasurement: pyqtSignal
- warning: pyqtSignal
- displayRates: pyqtSignal</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>30</y>
      <w>330</w>
      <h>950</h>
    </coordinates>
    <panel_attributes>MainWindow
PyQt5.QtWidgets.QMainWindow
mainwindow.py
--
- _sets: libs.dictionary.Uisettings
- _files: libs.saveFiles.FileDialogue
- _data: ndarray
- _mode: int
- _r: libs.Refresher.Refresh
- signal: Communicate
- _dataQ1: multiprocessing.Queue
- _dataQ2: multiprocessing.Queue
- _animaDataQ1: multirpocessing.Queue
- _animDataQ2: multiprocessing.Queue
- _resultQ1: multiprocessing.Queue
- _resultQ2: multiprocessing.Queue
- _readArraySize: int
- _running: multiprocessing.Event
- statusBar: PyQt5.QtWidgets.QStatusBar
- loadApp: PyQt5.QtWidgets.QAction
- saveApp: PyQt5.QtWidgets.QAction
- saveData: PyQt5.QtWidgets.QAction
- saveHDF5: PyQt5.QtWidgets.QAction
- closeApp: PyQt5.QtWidgets.QAction
- label1 - 10: PyQt5.QtWidgets.QLabel
- laserGroup: PyQt5.QtWidgets.QGroupBox
- vbox1 - 4: PyQt5.QtWidgets.QVBoxLayout
- hbox1 - 11: PyQt5.QtWidgets.QHBoxLayout
- sld_red: PyQt5.QtWidgets.QSlider
- sld_green: PyQt5.QtWidgets.QSlider
- sb_red: PyQt5.QtWidgets.QSpinBox
- sb_green: PyQt5.QtWidgets.QSpinBox
- sld_percentage: PyQt5,QtWidgets.QSlider
- sb_percent1: PyQt5.QtWidgets.QSpinBox
- sb_percent2: PyQt5.QtWidgets.QSpinBox
- apdGroup: PyQt5.QtWidgets.QGroupBox
- sb_sampFreq: PyQt5.QtWidgets.QSpinBox
- rb_cont: PyQt5.QtWidgets.QRadioButton
- rb_finite: PyQt5.QtWidgets.QRadioButton
- duration: PyQt5.QtWidgets.QSpinBox
- buttonGroup: PyQt5.QtWidgets.QGroupBox
- startButton: PyQt5.QtWidgets.QPushButton
- stopButton: PyQt5.QtWidgets.QPushButton
- progress: PyQt5.QtWidgets.QProgressBar
- lcdGroup: PyQt5.QtWidgets.QGroupBox
- green_lcd: PyQt5.QtWidgets.QLCDNumber
- red_lcd: PyQt5.QtWidgets.QLCDNumber
- centralBox: PyQt5.QtWidgets.QGroupBox
- grid: PyQt5.QtWidgets.QGridLayout
- menuBar: menuBar
- fileMenue: menuBar.addMenu
- filename: filehandler
- _counter1: libs.Counter.Counter
- _counter2: libs.Counter.Counter
- _laser: libs.Laser.LaserControl
- _anim: libs.Animation.Animation
- _dataProcesser1: libs.dataProcesser.DataProcesser
- _dataProcesser2: libs.dataProcesser.DataProcesser
- _u: threading.Thread

--
- menueLayout()
- GetFileName(string keyword)
- closeApplication()
- closeEvent(event event)
- refreshUI(string changeType, string changeKey, float value)
- refreshRadioButton()
- refreshAll()
- startBtn()
- startProcesses()
- waitForIteration()
- pyqtSlot(int) setProgressBar(int i)
- pyqtSlot(list) displayRatesOnLCD(list x)
- pyqtSlot() warnPopup()
- pyqtSlot() stopBtn()
- </panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
